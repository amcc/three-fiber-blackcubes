{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Cube","props","useState","isBig","setIsBig","isHovered","setIsHovered","ref","useRef","useFrame","current","rotation","x","y","size","color","onClick","onPointerOver","onPointerOut","attach","args","CubeMaker","cubes","i","rx","Math","random","ry","rz","px","py","pz","push","position","Scene","useThree","camera","domElement","gl","intensity","extend","OrbitControls","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAOA,SAASA,EAAKC,GACZ,MAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACMC,EAAMC,mBACZC,aAAS,WACPF,EAAIG,QAAQC,SAASC,GAAK,IAC1BL,EAAIG,QAAQC,SAASE,GAAK,OAG5B,IAAMC,EAAOX,EAAQ,GAAM,EACrBY,EAAQV,EAAY,SAAW,QAErC,OACE,iDACMJ,GADN,IAEEM,IAAKA,EACLS,QAAS,kBAAMZ,GAAUD,IACzBc,cAAe,kBAAMX,GAAa,IAClCY,aAAc,kBAAMZ,GAAa,IALnC,UAOE,mCAAmBa,OAAO,WAAWC,KAAM,CAACN,EAAMA,EAAMA,KACxD,sCAAsBK,OAAO,WAAWJ,MAAOA,QAKrD,SAASM,IAEP,IADA,IAAIC,EAAQ,GACHC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,IAAIC,EAAqB,GAAhBC,KAAKC,SACVC,EAAqB,GAAhBF,KAAKC,SACVE,EAAqB,GAAhBH,KAAKC,SACVG,EAAqB,EAAhBJ,KAAKC,SAAe,EACzBI,EAAqB,EAAhBL,KAAKC,SAAe,EACzBK,EAAqB,EAAhBN,KAAKC,SAAe,EAC7BJ,EAAMU,KAAK,cAAChC,EAAD,CAAMW,SAAU,CAACa,EAAIG,EAAIC,GAAKK,SAAU,CAACJ,EAAIC,EAAIC,MAE9D,OAAOT,EAGT,SAASY,IACP,MAGIC,cAFFC,EADF,EACEA,OACMC,EAFR,EAEEC,GAAMD,WAGR,OACE,qCACE,iCACA,4BAAYE,UAAW,EAAGN,SAAU,EAAE,EAAG,EAAG,KAC5C,cAACZ,EAAD,IAEA,+BAAeD,KAAM,CAACgB,EAAQC,QAtDpCG,YAAO,CAAEC,oBAmEMC,MARf,WACE,OACE,cAAC,IAAD,UACE,cAACR,EAAD,OCvDSS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.18ffeac8.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useRef } from \"react\";\nimport { Canvas, useThree, extend, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nextend({ OrbitControls });\n\nfunction Cube(props) {\n  const [isBig, setIsBig] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const ref = useRef();\n  useFrame(() => {\n    ref.current.rotation.x += 0.01;\n    ref.current.rotation.y += 0.01;\n  });\n\n  const size = isBig ? 0.1 : 1;\n  const color = isHovered ? \"orange\" : \"black\";\n\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      onClick={() => setIsBig(!isBig)}\n      onPointerOver={() => setIsHovered(true)}\n      onPointerOut={() => setIsHovered(false)}\n    >\n      <boxBufferGeometry attach=\"geometry\" args={[size, size, size]} />\n      <meshStandardMaterial attach=\"material\" color={color} />\n    </mesh>\n  );\n}\n\nfunction CubeMaker() {\n  let cubes = [];\n  for (let i = 0; i < 100; i++) {\n    let rx = Math.random() * 20;\n    let ry = Math.random() * 20;\n    let rz = Math.random() * 20;\n    let px = Math.random() * 4 - 2;\n    let py = Math.random() * 4 - 2;\n    let pz = Math.random() * 4 - 2;\n    cubes.push(<Cube rotation={[rx, ry, rz]} position={[px, py, pz]} />);\n  }\n  return cubes;\n}\n\nfunction Scene() {\n  const {\n    camera,\n    gl: { domElement },\n  } = useThree();\n\n  return (\n    <>\n      <ambientLight />\n      <pointLight intensity={1} position={[-1, 2, 1]} />\n      <CubeMaker />\n\n      <orbitControls args={[camera, domElement]} />\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <Canvas>\n      <Scene />\n    </Canvas>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}